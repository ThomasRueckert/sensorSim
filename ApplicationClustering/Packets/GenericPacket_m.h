//
// Generated file, do not edit! Created by nedtool 4.6 from Packets/GenericPacket.msg.
//

#ifndef _GENERICPACKET_M_H_
#define _GENERICPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Packets/GenericPacket.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet GenericPacket
 * {
 *     //Header
 *     unsigned char packetType;
 *     unsigned char subType;
 *     unsigned char ttl;
 *     unsigned char payloadsize;
 *     unsigned short srcId;
 *     unsigned short dstId;
 *     //Payload    
 *     unsigned char data[100];
 * }
 * </pre>
 */
class GenericPacket : public ::cPacket
{
  protected:
    unsigned char packetType_var;
    unsigned char subType_var;
    unsigned char ttl_var;
    unsigned char payloadsize_var;
    unsigned short srcId_var;
    unsigned short dstId_var;
    unsigned char data_var[100];

  private:
    void copy(const GenericPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GenericPacket&);

  public:
    GenericPacket(const char *name=NULL, int kind=0);
    GenericPacket(const GenericPacket& other);
    virtual ~GenericPacket();
    GenericPacket& operator=(const GenericPacket& other);
    virtual GenericPacket *dup() const {return new GenericPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned char getPacketType() const;
    virtual void setPacketType(unsigned char packetType);
    virtual unsigned char getSubType() const;
    virtual void setSubType(unsigned char subType);
    virtual unsigned char getTtl() const;
    virtual void setTtl(unsigned char ttl);
    virtual unsigned char getPayloadsize() const;
    virtual void setPayloadsize(unsigned char payloadsize);
    virtual unsigned short getSrcId() const;
    virtual void setSrcId(unsigned short srcId);
    virtual unsigned short getDstId() const;
    virtual void setDstId(unsigned short dstId);
    virtual unsigned int getDataArraySize() const;
    virtual unsigned char getData(unsigned int k) const;
    virtual void setData(unsigned int k, unsigned char data);
};

inline void doPacking(cCommBuffer *b, GenericPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GenericPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _GENERICPACKET_M_H_

