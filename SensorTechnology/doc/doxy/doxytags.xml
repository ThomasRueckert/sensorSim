<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AbstractSensingUnit.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SensingUnit/</path>
    <filename>AbstractSensingUnit_8cc</filename>
    <includes id="AbstractSensingUnit_8h" name="AbstractSensingUnit.h" local="no" imported="no">AbstractSensingUnit.h</includes>
    <includes id="SensorNode_8h" name="SensorNode.h" local="yes" imported="no">SensorNode.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSensingUnit.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SensingUnit/</path>
    <filename>AbstractSensingUnit_8h</filename>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="CustomWorldUtility_8h" name="CustomWorldUtility.h" local="yes" imported="no">CustomWorldUtility.h</includes>
    <includes id="SimpleSensorData_8h" name="SimpleSensorData.h" local="yes" imported="no">SimpleSensorData.h</includes>
    <class kind="class">AbstractSensingUnit</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractSensingUnit_8h.html</anchorfile>
      <anchor>ac9ce0d7c4b7d30901f3006f0a39511d4</anchor>
      <arglist>(AbstractSensingUnit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractSensor.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/</path>
    <filename>AbstractSensor_8cc</filename>
    <includes id="AbstractSensor_8h" name="AbstractSensor.h" local="no" imported="no">AbstractSensor.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSensor.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/</path>
    <filename>AbstractSensor_8h</filename>
    <class kind="class">AbstractSensor</class>
  </compound>
  <compound kind="file">
    <name>AbstractSignalConditioner.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SignalConditioner/</path>
    <filename>AbstractSignalConditioner_8cc</filename>
    <includes id="AbstractSignalConditioner_8h" name="AbstractSignalConditioner.h" local="no" imported="no">AbstractSignalConditioner.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSignalConditioner.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SignalConditioner/</path>
    <filename>AbstractSignalConditioner_8h</filename>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <class kind="class">AbstractSignalConditioner</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractSignalConditioner_8h.html</anchorfile>
      <anchor>a7fd8f0f565bf51ae2df0f843ef91f6b8</anchor>
      <arglist>(AbstractSignalConditioner)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractSignalConverter.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SignalConverter/</path>
    <filename>AbstractSignalConverter_8cc</filename>
    <includes id="AbstractSignalConverter_8h" name="AbstractSignalConverter.h" local="no" imported="no">AbstractSignalConverter.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSignalConverter.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SignalConverter/</path>
    <filename>AbstractSignalConverter_8h</filename>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <class kind="class">AbstractSignalConverter</class>
  </compound>
  <compound kind="file">
    <name>AbstractTransducer.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/Transducer/</path>
    <filename>AbstractTransducer_8cc</filename>
    <includes id="AbstractTransducer_8h" name="AbstractTransducer.h" local="no" imported="no">AbstractTransducer.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractTransducer.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/Transducer/</path>
    <filename>AbstractTransducer_8h</filename>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <class kind="class">AbstractTransducer</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractTransducer_8h.html</anchorfile>
      <anchor>a2dd66141dad8a627e3e94ccde9f8b056</anchor>
      <arglist>(AbstractTransducer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/</path>
    <filename>BatteryAccess_8cc</filename>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="no" imported="no">BatteryAccess.h</includes>
  </compound>
  <compound kind="file">
    <name>BatteryAccess.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/</path>
    <filename>BatteryAccess_8h</filename>
    <includes id="SensorNode_8h" name="SensorNode.h" local="yes" imported="no">SensorNode.h</includes>
    <class kind="class">BatteryAccess</class>
  </compound>
  <compound kind="file">
    <name>CustomWorldUtility.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/WorldModel/</path>
    <filename>CustomWorldUtility_8cc</filename>
    <includes id="CustomWorldUtility_8h" name="CustomWorldUtility.h" local="no" imported="no">CustomWorldUtility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>xmlHumidity</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>a13f627f38b9d70e55d986eaaabf7e2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlPressure</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>a9dafe0a706238c6d9f4aac8ffe247dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlTemperature</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>ae8306faf2c75c0444af368646794aacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlLight</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>a19676c482ab5a16017cafb0b585ba45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>humidityPath</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>ad3e853e0287df2970ddb150180c21e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>pressurePath</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>a30a4cf9b5bc13dde2480bd26e0e817e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>temperaturePath</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>afbb16b347c0424ab55de9a547873ba82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lightPath</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>abb4fad07d708ca38b6a1e0c631729d67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CustomWorldUtility.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/WorldModel/</path>
    <filename>CustomWorldUtility_8h</filename>
    <includes id="StatisticsInterface_8h" name="StatisticsInterface.h" local="no" imported="no">StatisticsInterface.h</includes>
    <includes id="ExtendedMessage__m_8h" name="ExtendedMessage_m.h" local="no" imported="no">ExtendedMessage_m.h</includes>
    <class kind="class">CustomWorldUtility</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>CustomWorldUtility_8h.html</anchorfile>
      <anchor>a2d092fd3cbbee6747837de856fd06730</anchor>
      <arglist>(CustomWorldUtility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtendedMessage_m.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/ExtendedMessage/</path>
    <filename>ExtendedMessage__m_8h</filename>
    <class kind="class">ExtendedMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ExtendedMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ExtendedMessage__m_8h.html</anchorfile>
      <anchor>a5f1dbc3f7818e07ebbdcd23bc006ad7f</anchor>
      <arglist>(cCommBuffer *b, ExtendedMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ExtendedMessage__m_8h.html</anchorfile>
      <anchor>a7edd4e36f3588e0490c0b25fc5caed0d</anchor>
      <arglist>(cCommBuffer *b, ExtendedMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Memory.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Memory/</path>
    <filename>Memory_8cc</filename>
    <includes id="Memory_8h" name="Memory.h" local="no" imported="no">Memory.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>error</name>
      <anchorfile>Memory_8cc.html</anchorfile>
      <anchor>a0c5e59a7caaa02f887d077eaa467f209</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>emptyTime</name>
      <anchorfile>Memory_8cc.html</anchorfile>
      <anchor>a50b33848a9dcf8ff4741fcf4a294ed26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Memory.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Memory/</path>
    <filename>Memory_8h</filename>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="SimpleSensorData_8h" name="SimpleSensorData.h" local="yes" imported="no">SimpleSensorData.h</includes>
    <class kind="struct">storage</class>
    <class kind="class">Memory</class>
    <member kind="typedef">
      <type>struct storage</type>
      <name>storage</name>
      <anchorfile>Memory_8h.html</anchorfile>
      <anchor>a2f651364361dc505afbbd4b2b3114265</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Memory_8h.html</anchorfile>
      <anchor>a06b94a67104406a0aaa0b5ab7a5ebc6d</anchor>
      <arglist>(Memory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Processor.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Processor/</path>
    <filename>Processor_8cc</filename>
    <includes id="Processor_8h" name="Processor.h" local="no" imported="no">Processor.h</includes>
    <includes id="SensorNode_8h" name="SensorNode.h" local="yes" imported="no">SensorNode.h</includes>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <includes id="Memory_8h" name="Memory.h" local="yes" imported="no">Memory.h</includes>
  </compound>
  <compound kind="file">
    <name>Processor.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Processor/</path>
    <filename>Processor_8h</filename>
    <includes id="BatteryAccess_8h" name="BatteryAccess.h" local="yes" imported="no">BatteryAccess.h</includes>
    <class kind="class">Processor</class>
    <member kind="define">
      <type>#define</type>
      <name>sensing</name>
      <anchorfile>Processor_8h.html</anchorfile>
      <anchor>aeddc79ad91f80b50610bd1132d5efe2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>shiftProcessorMode</name>
      <anchorfile>Processor_8h.html</anchorfile>
      <anchor>a3e7e3a3a0577a2a8e68b8cec0b548651</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>collectStatistics</name>
      <anchorfile>Processor_8h.html</anchorfile>
      <anchor>a9cec121eaa1087339a084d8db0ba6266</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>readAndClearStorage</name>
      <anchorfile>Processor_8h.html</anchorfile>
      <anchor>a59f393318547ddec28185c57c190c574</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>Processor_8h.html</anchorfile>
      <anchor>a659cfe9d79ce5b7878e6804a4aad8d8e</anchor>
      <arglist>(Processor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SensorNode.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/</path>
    <filename>SensorNode_8cc</filename>
    <includes id="SensorNode_8h" name="SensorNode.h" local="no" imported="no">SensorNode.h</includes>
    <includes id="Processor_8h" name="Processor.h" local="yes" imported="no">Processor.h</includes>
    <includes id="ExtendedMessage__m_8h" name="ExtendedMessage_m.h" local="yes" imported="no">ExtendedMessage_m.h</includes>
  </compound>
  <compound kind="file">
    <name>SensorNode.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/</path>
    <filename>SensorNode_8h</filename>
    <class kind="class">SensorNode</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>SensorNode_8h.html</anchorfile>
      <anchor>af011cbec37a8e03751f1ba7138d5e3e5</anchor>
      <arglist>(SensorNode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleSensorData.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SimpleSensorData/</path>
    <filename>SimpleSensorData_8cc</filename>
    <includes id="SimpleSensorData_8h" name="SimpleSensorData.h" local="no" imported="no">SimpleSensorData/SimpleSensorData.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleSensorData.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SimpleSensorData/</path>
    <filename>SimpleSensorData_8h</filename>
    <class kind="class">SimpleSensorData</class>
  </compound>
  <compound kind="file">
    <name>StatisticsInterface.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/StatisticsInterface/</path>
    <filename>StatisticsInterface_8cc</filename>
    <includes id="StatisticsInterface_8h" name="StatisticsInterface.h" local="no" imported="no">StatisticsInterface.h</includes>
  </compound>
  <compound kind="file">
    <name>StatisticsInterface.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/StatisticsInterface/</path>
    <filename>StatisticsInterface_8h</filename>
    <includes id="ExtendedMessage__m_8h" name="ExtendedMessage_m.h" local="no" imported="no">ExtendedMessage_m.h</includes>
    <class kind="class">StatisticsInterface</class>
  </compound>
  <compound kind="class">
    <name>AbstractSensingUnit</name>
    <filename>classAbstractSensingUnit.html</filename>
    <base>BatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractSensingUnit</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a9fbd2ca0416165328ad81928c2fe46ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSensingUnit</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a0df5b81c64722f5840cb2557b3820646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a81c3160c504fe03acb957d36dab11441</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAndForward</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a4598892103ce0b0cb445d64f791a5e23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a78c7bc3d2e75649564f9116d6f589331</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord *</type>
      <name>getLocation</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a1608983181cb95ec4f8519f6fe2c8762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>readData</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a558143ac00a8a3bba0288b2cf4e4869b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ExtendedMessage *</type>
      <name>generateMessage</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a4714cfa2132e7878b407d23283b3c24e</anchor>
      <arglist>(const char *msgname)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord *</type>
      <name>Position</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a6f0a57a20788d0759cf17f9e8a0aa88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CustomWorldUtility *</type>
      <name>world</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>ab4f3381044031b23becdd05ebb1c0869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelMobilityPtrType</type>
      <name>pMobType</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a8c4554acc912bcf3d50d867715ebed13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a86a9983eab854bfee2d60acdce9be46e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractSensor</name>
    <filename>classAbstractSensor.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractSensor</name>
      <anchorfile>classAbstractSensor.html</anchorfile>
      <anchor>a0800f84c76f69695407d42d0428197ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSensor</name>
      <anchorfile>classAbstractSensor.html</anchorfile>
      <anchor>a1d631bb265952074d5460208ae2a60f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractSignalConditioner</name>
    <filename>classAbstractSignalConditioner.html</filename>
    <base>BatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractSignalConditioner</name>
      <anchorfile>classAbstractSignalConditioner.html</anchorfile>
      <anchor>afaae205f6bb08295724898f7c72a366f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSignalConditioner</name>
      <anchorfile>classAbstractSignalConditioner.html</anchorfile>
      <anchor>aab81002aafa4317ff87d98f8bed87a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractSignalConditioner.html</anchorfile>
      <anchor>a8c2df73639b7c829045b5e829585c7bf</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractSignalConverter</name>
    <filename>classAbstractSignalConverter.html</filename>
    <base>BatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractSignalConverter</name>
      <anchorfile>classAbstractSignalConverter.html</anchorfile>
      <anchor>a57fa4ab6d4852e79c8a9b774fb7b9326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSignalConverter</name>
      <anchorfile>classAbstractSignalConverter.html</anchorfile>
      <anchor>adaefdb4ecd7ab4b6597b5a2630c0d435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractSignalConverter.html</anchorfile>
      <anchor>afd90ef37a4c0c8612c15289bbc392db2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractTransducer</name>
    <filename>classAbstractTransducer.html</filename>
    <base>BatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractTransducer</name>
      <anchorfile>classAbstractTransducer.html</anchorfile>
      <anchor>a550d7a9ea2ff02fd671a577127a66fcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractTransducer</name>
      <anchorfile>classAbstractTransducer.html</anchorfile>
      <anchor>ac543d76e6cdd277ef1731175dc3a27ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractTransducer.html</anchorfile>
      <anchor>a17bac38b973f48d168e56b12b7268f91</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BatteryAccess</name>
    <filename>classBatteryAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>BatteryAccess</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a91a34707835f0938bc9c1a1c470ad5fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BatteryAccess</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a144bc00c077326f959c340effd8f61af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a6f553d183d76b1364049a95f7a941aad</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>say</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a21333e1b4de66210d5e6b66fa5545b26</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>say</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>adb8622bf7b9f1369b12fe76864d88c87</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a9fd058cc0c61299cb19628bb384cc939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeDrawCurrent</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a1220de1fd5dd08aae48cbb3803bd275c</anchor>
      <arglist>(double cur, int acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeEnergyConsumption</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>ab6c24df49a295ffe794ae896c78bb66f</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a93326bcfe4d6899cf6561a4418bcda8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>ac8bf6a0bb656ed2006bbee3387151ab7</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>currentOverTime</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a9449bfc9a1c5633de1177d5c610af2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>energiePerOperation</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a8d08f33bb3ed5e89669b55293becc17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SensorNode *</type>
      <name>getSensorNode</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>a4100ccb9b26ae7ee3d1bb992c438f6c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>consumption</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>ad48082c0b3c98d8037b0cd59af4e5fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>overTime</name>
      <anchorfile>classBatteryAccess.html</anchorfile>
      <anchor>af162b004b3473a64dc63fad9a5fc0307</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CustomWorldUtility</name>
    <filename>classCustomWorldUtility.html</filename>
    <base>StatisticsInterface</base>
    <member kind="function">
      <type></type>
      <name>CustomWorldUtility</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a8ae1cd5aea3572589a1f02e2321ccb70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CustomWorldUtility</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a73b162553cbc92e2c76c5a7f0366e522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getValueByPosition</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a126a0fbfce6a3c25550c6179f2aae2f2</anchor>
      <arglist>(std::string, Coord *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int ***</type>
      <name>readXML</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a1c72ebd667de5072ff048a8c1a2aec76</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>afe9bd131432912a3d68fae059e119b48</anchor>
      <arglist>(int ***&amp;parameter, int ***&amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>acc66fcf67be28acc729c0959b8a1dcf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPressure</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a99b8e3a05742bf8075be601297b153aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setHumidity</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>afa8e8a57f4670d18a5f4cfb2d9cddd67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setLight</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>aa1f812e94036c2b388337ced4a2ea6a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a3c3e94f910e3591afe8614703dfd0b54</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ac61ee162cfbe625837494d796c046d22</anchor>
      <arglist>(cMessage *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a2c0bbdcf5488fc82de7a10b29194d91d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createFiles</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a28025b2e42892b7f6e19f2caa7880784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ExtendedMessage *</type>
      <name>generateMessage</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ae8e5ca8ba35d32db08967c36b673d5ff</anchor>
      <arglist>(const char *msgname)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateEnvironmentData</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a5c71e3d464d793bdc040d828a678ee4f</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>generateTemperature</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a4f4564b45f65f2f5ea52fa30447b118f</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>generatePressure</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ab36b97b0202e13c2ce7fa5d6f2db297a</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>generateHumidity</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a10d06e6d8acbc176591e2dbd3abda155</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>generateLight</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a1173bef536d5a4c365a851c95a3aa750</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroySensorData</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ae0066c89163fe4b34193db17dd2716bc</anchor>
      <arglist>(int ***&amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getEnumFromType</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ae9e9c291ea460dc7b7a955cc9f3f0289</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>say</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a6a89cef90ef7cf2dc96f182deef5b13e</anchor>
      <arglist>(const char *say)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplay</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a709aaca388e19d04a3fb4f165d0ceceb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a32f28e6a1a08c7c677d1163979956117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int ***</type>
      <name>temperatureArray</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ac073fe1cd47798dbbb5645f09a007b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int ***</type>
      <name>pressureArray</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a8828095d15d39a4a0d33c812c48d5ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int ***</type>
      <name>humidityArray</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>aa6b990b6b6ce3e3e0b9f3d5413b61082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int ***</type>
      <name>lightArray</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a2b43dce45399d3d4bbda2c6128515b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sizeX</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a05f35ec3e94509d81b44e891be8d52e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sizeY</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a9941ba5f5607868671de963e427c019e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sizeZ</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a18e5b285951e6160dfe6132d3bd753c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>noisy</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a4f7166b89a8fe28eb3f277bb42fb4edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>breakAfterInit</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ac2e079ecdd91c2df91249bb52eb8b6fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dataRecreationIntervall</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a741c700310f81f97c332aa5393814bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessageMeasure</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a6973fbf7a5ca5cc1376515d664b53715</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExtendedMessage</name>
    <filename>classExtendedMessage.html</filename>
    <base>cMessage</base>
    <member kind="function">
      <type></type>
      <name>ExtendedMessage</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ade0274ccdff9560ffe8fad9df854f319</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtendedMessage</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a98cc3e001bc44e7f13db49556bbfde09</anchor>
      <arglist>(const ExtendedMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExtendedMessage</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a910195e5d212e7efbc1289613f61c6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ad9aa685b7360efaa3777167677343f51</anchor>
      <arglist>(const ExtendedMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendedMessage *</type>
      <name>dup</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>af3e6533074e0f1804f7d4c1ca2bdccd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>abad8c6d568cff093239ebcb024034f1e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>aa9d0e2513c59d1dc2e31373b155a2e51</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSource</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>af7eaaeebebdcd783212aa9ff2170f145</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>adccfc56b16455ecc18975b22bc8f9e2b</anchor>
      <arglist>(int source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestination</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a996afd43620680ce68c75604babd091b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a813ecbc567b0127c4d57b451b3afb364</anchor>
      <arglist>(int destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHopCount</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a9b4ec09ba1a5913dd6c3952c09748779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a71e081f7cdc58d2f55a589757639365c</anchor>
      <arglist>(int hopCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ad6bf387750a00b6352c7054e58a110d7</anchor>
      <arglist>(const ExtendedMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>source_var</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ad94fa5e715f14f856756f4b76fa7adbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destination_var</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a5500e69efec5761be0282886f730541e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopCount_var</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a976f580abc29bb900761b567615a7b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ab07ff9eccc340341355a0a341bb971fb</anchor>
      <arglist>(const ExtendedMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Memory</name>
    <filename>classMemory.html</filename>
    <base>BatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>Memory</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a585d7bb6fc6f2237bcebf94a86b7dd99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Memory</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a0ffa9759ebbf103f11132a505b93bdc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a21d29b6ea87f17ae2c1f13d434324f3b</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a64b0afa7f3209a583e8cb2bfc47d4c97</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createEntry</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a1b9038676e3d179aa23b6753fe1dd08c</anchor>
      <arglist>(std::string, int)</arglist>
    </member>
    <member kind="function">
      <type>storage</type>
      <name>readEntry</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>ac0542c55a25701239893c69c49cd56e0</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>storage</type>
      <name>readEntry</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>afd208b6292565e8583bc1a10950e6c96</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateEntry</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a300741202bc10a8ebc257dde773bc0a2</anchor>
      <arglist>(std::string, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteEntry</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a8dc7068874f26b5d78d16b770cb0a6e8</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteEntry</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>acdb4a81b834adbb8d4af07f8b5c1b7e7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIdByType</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>aeb0696eaa8821ad6efba76d97a7c27e8</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>storage *</type>
      <name>readAllAndClear</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>ac743d8b310d62c9c68432864f1b82200</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStorage</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a77283b9fdd5e2ea3c9290fd5d74a5eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const storage</type>
      <name>empty</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a16c4c48067c846f1c45fc45d709cc1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>storage *</type>
      <name>measureDataStorage</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>a91164cf7817e12a2197d07acc3f720d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>storageSize</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>af7a1d34d21ae2ea2f3ead042970e4f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>storageDataSets</name>
      <anchorfile>classMemory.html</anchorfile>
      <anchor>aed373dfbc97cf6b187a36ccd32881a72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Processor</name>
    <filename>classProcessor.html</filename>
    <base>BatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>Processor</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a50c89dbf76a073f4fb491628258cf292</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Processor</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>acf37952c5b420d4e903a512571678692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>ac2928d91d0398e64f0ad2126c37d82a0</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a75882f9b6fc4d00ca3bda5f70f4d4a72</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a97e13432381e72302a9f264f0100fce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedulePeriodicSelfMessage</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>afba8d5740071310d4a0d67ec886cddb3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedulePeriodicSelfMessage</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a0c4c27feddc90e7f1ff66c21db0df3d1</anchor>
      <arglist>(cMessage *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSensingUnit</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>abdfb49594bfdbeee4d99808a9a353b02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>aa1ec91e80afe2c4a19378fc3a0fec6d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doCollectStatistics</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>ad2a4c0f1519fd1bdd72a849e5255e558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a16664ccbeeb692610e5e1120fa280d11</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchProcessorMode</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>acf1aa15766f93c170c224bd674ea07d2</anchor>
      <arglist>(MODES mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchProcessorMode</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a19f1b8ebd362ad55ff58f76fcd5be9ec</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchProcessorMode</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a16e50c796e3b5b914b1335d788a26bc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MODES</type>
      <name>getProcessorMode</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a342dfbbd158dadecbb96f25a5a2fb8a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasTemperatureSensor</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a19d5ac99ee7f1cf78baf4dddf39a3280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasHumiditySensor</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a7136767dde75c13ed9fb44e0af7085c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasPressureSensor</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a5c587f9e2f931a3214186a436287a18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasLightSensor</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>abfddc8e73fec07bd2a25427d8c86084a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>MODES</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a6d296ef30a05b4f8aa186fb5d4aa99c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NORMAL</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a6d296ef30a05b4f8aa186fb5d4aa99c8a506076304109f7926fb1ba61b686ba83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>POWER_SAVING</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a6d296ef30a05b4f8aa186fb5d4aa99c8ae26e6058a0c4231116ede380d82bed8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>HIGH_PERFORMANCE</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a6d296ef30a05b4f8aa186fb5d4aa99c8a2d3a9556eb8a882fe69b71233854d36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>OFF</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a6d296ef30a05b4f8aa186fb5d4aa99c8ab6ac32f850413f94d915246276cfdf0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplay</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>aaf70fc21da31043e12f8731cf8dd77a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPeriphery</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>ae9ec7e019f442d973b7ffa090272be7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addSensorModules</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a989e1d92d4694b8b7a0bffa5319b728c</anchor>
      <arglist>(cModule *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>switchPeripheryEnergyConsumption</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a01cc0b37f62777976db4eaaf18254f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sensingIntervall</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a4a778aabdbdffd8e03232bdc56ab1d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>shiftProcessorModeNormalIntervall</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a5efad714a750aaae525a0750144d5673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>shiftProcessorModeHighPerformanceIntervall</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a4d85c1653f2d5a155a59b20d68161d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>shiftProcessorModePowerSavingIntervall</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a041899097ab5e257f5729f23c97c3170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>collectStatisticsIntervall</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>ad24512d4ed45fd65b024958185dbb121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>readAndClearStorageIntervall</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>aeb234d393d1843159e792c713efecd9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessageMeasure</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a87b1b113bf93bdd802b81810b201af6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessageShiftMode</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a9037775765b103debb5666e41d82e249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessageStatistics</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>ad2af6cf93286343b28729fb96576fc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessageReadAndClear</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a60ca95631384c900045cc2b8297546b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentOverTimeNormal</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>af103843a57de0680db24c2245988581a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>energiePerOperationNormal</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a70970f0f016c6f7f6f950002a5ca4c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>peripheryNormalRatio</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>ad74b0c6de296d00da6e75028e4aa1bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentOverTimePowerSaving</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>ab9d245c2702673e5fff1300c9105e6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>energiePerOperationPowerSaving</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>aa6281a6edcbd510764632a22292f7ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>peripheryPowerSavingRatio</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a81002064ba9de42c9aaa5e31d6fa231b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentOverTimeHighPerformance</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a5b5471bc2b6b4b1e51bf6dbd74927dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>energiePerOperationHighPerformance</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>aa260c8b94bd163165df1d31e8f94782f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>peripheryHighPerformanceRatio</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a5ac076b7ab942a302c3670d4cf3dce3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numDevices</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>af37cf136320d422855c3029158f2b67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; cModule * &gt;</type>
      <name>periphery</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>ae9428673d6c3b7e57a22d7ebe823dfa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>activatedMode</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a6715b8857ced0f672f6149591ffe01d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>voltage</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a1d95c0f1ff30ee2741d040d04c1bc631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>residualRelative</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a2f2b495bb209182095cd2abfbac721b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>residualAbs</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a1d65cab1b6fc3997c99a523a4d46c1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cLongHistogram</type>
      <name>voltageStats</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>adf2e7d93d29bd445561889ac50822fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>voltageVector</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a2cf05fb34f2e567470187b495e20a08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cLongHistogram</type>
      <name>residualRelativeStats</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>aa9f95f84b7d476e4f13b527bc2a35a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>residualRelativeVector</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a601db9019d92563b9cf53e70fee53198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cLongHistogram</type>
      <name>residualAbsStats</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>aebc51f0b1eb45d6f427441ffb1c7d791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>residualAbsVector</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a02f133a81d3f0c2fa499c6864ea55016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>activatedModeVector</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>a68c093c142ae7f356494ab702459e58c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>sensorUnitsActive</name>
      <anchorfile>classProcessor.html</anchorfile>
      <anchor>aeaa0e51d98175ef5b878a5927e101673</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SensorNode</name>
    <filename>classSensorNode.html</filename>
    <base>cModule</base>
    <member kind="function">
      <type>cDatarateChannel *</type>
      <name>getControlChannel</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>a63fe5fd71f2cfe90f96abe2033a19201</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDatarateChannel *</type>
      <name>getDataChannel</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>a4cc02aefaf99391552eb2563fca71230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>say</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>a2e4b6c12f49731e246f014017dbe32ad</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>noisy</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>a2a109e491fafab5cd7f97e306846c1de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>a4f58c5be7251b244f624d2d12b157f3d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>a8765ce53c4c5213709dec7ade8245f08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>a97e7dfcef1fd425b2cdc2fd4541b3624</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNumGates</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>afdd7d7c7fad12dbb8c2041f4c14cce26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createProcessor</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>ad82337c913b9165fc3be42fe17aef2e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectProcessorAndMemory</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>a18c3b639f5ec430f4345a5e5a480add4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectProcessorAndSensor</name>
      <anchorfile>classSensorNode.html</anchorfile>
      <anchor>ab1eda959efc98312d4e4e39c47b649d1</anchor>
      <arglist>(cModule &amp;, std::string)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleSensorData</name>
    <filename>classSimpleSensorData.html</filename>
    <base>cNamedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleSensorData *</type>
      <name>dup</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>a3596358623935b76f49335ccc4a3c91d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>a11e346aae50f95840a5a92824e3fecc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleSensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>a3700727cd38b4754462cbab02d2b202d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>ada607df3fbfa545514876d337c78f180</anchor>
      <arglist>(const char *name, int sensorData, simtime_t timestamp, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>a73fc4b9e4e33e9218a6fef5039c8f937</anchor>
      <arglist>(const char *name, int sensorData, bool namepooling=true)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>ad510fe1fbc58b19c5c6c0fea4592d966</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>timestamp</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>aacad378a2204d4940b705b9430bf48bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StatisticsInterface</name>
    <filename>classStatisticsInterface.html</filename>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ExtendedMessage *</type>
      <name>generateMessage</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a519db68a06bb988bceea9183224033fe</anchor>
      <arglist>(const char *msgname)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateDisplay</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a72197f87748af10d75ac70caddb2712e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a50a7b06a009cc7693e5677f67e1ab23c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSent</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a42d887601ec32670fd2892b4ef48e91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numReceived</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>ab8903c2fc5b9b6e93172a89f37b3f620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cLongHistogram</type>
      <name>hopCountStats</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a14368dced736b91c2b3208308175c946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>hopCountVector</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a8cfabbb0aa6c933032214ac7b117d225</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>storage</name>
    <filename>structstorage.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>structstorage.html</anchorfile>
      <anchor>aea35c88e91e00a4b90cbd90fafa00027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>structstorage.html</anchorfile>
      <anchor>a1fa49e9b91216d3c112461b4ab2cc03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>timeCreated</name>
      <anchorfile>structstorage.html</anchorfile>
      <anchor>a8edc8cac05002cbf7e37e6d148078677</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>NEDSupport</name>
    <filename>classNEDSupport_1_1ParameterRef.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosFSM</name>
    <title>Final State Machine macros</title>
    <filename>group__MacrosFSM.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosWatch</name>
    <title>WATCH macros</title>
    <filename>group__MacrosWatch.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersCont</name>
    <title>Continuous distributions</title>
    <filename>group__RandomNumbersCont.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersDiscr</name>
    <title>Discrete distributions</title>
    <filename>group__RandomNumbersDiscr.html</filename>
  </compound>
  <compound kind="group">
    <name>SimCore</name>
    <title>Simulation core classes</title>
    <filename>group__SimCore.html</filename>
  </compound>
  <compound kind="group">
    <name>Containers</name>
    <title>Container classes</title>
    <filename>group__Containers.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbers</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbers.html</filename>
  </compound>
  <compound kind="group">
    <name>Statistics</name>
    <title>Statistical data collection</title>
    <filename>group__Statistics.html</filename>
  </compound>
  <compound kind="group">
    <name>SimSupport</name>
    <title>Utility classes</title>
    <filename>group__SimSupport.html</filename>
  </compound>
  <compound kind="group">
    <name>Envir</name>
    <title>User interface: cEnvir and ev</title>
    <filename>group__Envir.html</filename>
  </compound>
  <compound kind="group">
    <name>EnumsTypes</name>
    <title>Enums, types, function typedefs</title>
    <filename>group__EnumsTypes.html</filename>
  </compound>
  <compound kind="group">
    <name>Functions</name>
    <title>Functions</title>
    <filename>group__Functions.html</filename>
  </compound>
  <compound kind="group">
    <name>Macros</name>
    <title>Macros</title>
    <filename>group__Macros.html</filename>
  </compound>
  <compound kind="group">
    <name>EnvirExtensions</name>
    <title>Extension interfaces</title>
    <filename>group__EnvirExtensions.html</filename>
  </compound>
  <compound kind="group">
    <name>Internals</name>
    <title>Internal classes</title>
    <filename>group__Internals.html</filename>
  </compound>
  <compound kind="group">
    <name>ParsimBrief</name>
    <title>Parallel simulation extension</title>
    <filename>group__ParsimBrief.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersGen</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbersGen.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosReg</name>
    <title>Registration macros</title>
    <filename>group__MacrosReg.html</filename>
  </compound>
  <compound kind="group">
    <name>FunctionsString</name>
    <title>String-related</title>
    <filename>group__FunctionsString.html</filename>
  </compound>
  <compound kind="page">
    <name>main</name>
    <title>OMNeT++ API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="page">
    <name>APIChanges</name>
    <title>API Changes</title>
    <filename>APIChanges</filename>
  </compound>
</tagfile>
