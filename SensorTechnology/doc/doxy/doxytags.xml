<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AbstractBatteryAccess.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/</path>
    <filename>AbstractBatteryAccess_8cc</filename>
    <includes id="AbstractBatteryAccess_8h" name="AbstractBatteryAccess.h" local="no" imported="no">AbstractBatteryAccess.h</includes>
    <includes id="AbstractSensorNode_8h" name="AbstractSensorNode.h" local="yes" imported="no">AbstractSensorNode.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractBatteryAccess.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/</path>
    <filename>AbstractBatteryAccess_8h</filename>
    <class kind="class">AbstractBatteryAccess</class>
  </compound>
  <compound kind="file">
    <name>AbstractMemory.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Memory/</path>
    <filename>AbstractMemory_8cc</filename>
    <includes id="AbstractMemory_8h" name="AbstractMemory.h" local="no" imported="no">AbstractMemory.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>error</name>
      <anchorfile>AbstractMemory_8cc.html</anchorfile>
      <anchor>a0c5e59a7caaa02f887d077eaa467f209</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractMemory.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Memory/</path>
    <filename>AbstractMemory_8h</filename>
    <includes id="AbstractBatteryAccess_8h" name="AbstractBatteryAccess.h" local="yes" imported="no">AbstractBatteryAccess.h</includes>
    <includes id="SimpleSensorData_8h" name="SimpleSensorData.h" local="yes" imported="no">SimpleSensorData.h</includes>
    <class kind="class">AbstractMemory</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractMemory_8h.html</anchorfile>
      <anchor>ae03480eb242d1012426a876247640aa9</anchor>
      <arglist>(AbstractMemory)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractProcessor.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Processor/</path>
    <filename>AbstractProcessor_8cc</filename>
    <includes id="AbstractProcessor_8h" name="AbstractProcessor.h" local="no" imported="no">AbstractProcessor.h</includes>
    <includes id="AbstractSensorNode_8h" name="AbstractSensorNode.h" local="yes" imported="no">AbstractSensorNode.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractProcessor.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Processor/</path>
    <filename>AbstractProcessor_8h</filename>
    <includes id="AbstractBatteryAccess_8h" name="AbstractBatteryAccess.h" local="yes" imported="no">AbstractBatteryAccess.h</includes>
    <class kind="class">AbstractProcessor</class>
    <member kind="define">
      <type>#define</type>
      <name>sensing</name>
      <anchorfile>AbstractProcessor_8h.html</anchorfile>
      <anchor>aeddc79ad91f80b50610bd1132d5efe2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>shiftProcessorMode</name>
      <anchorfile>AbstractProcessor_8h.html</anchorfile>
      <anchor>a3e7e3a3a0577a2a8e68b8cec0b548651</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>collectStatistics</name>
      <anchorfile>AbstractProcessor_8h.html</anchorfile>
      <anchor>a9cec121eaa1087339a084d8db0ba6266</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractProcessor_8h.html</anchorfile>
      <anchor>a186f89f24646d8807a574646cf3f6552</anchor>
      <arglist>(AbstractProcessor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractSensingUnit.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SensingUnit/</path>
    <filename>AbstractSensingUnit_8cc</filename>
    <includes id="AbstractSensingUnit_8h" name="AbstractSensingUnit.h" local="no" imported="no">AbstractSensingUnit.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSensingUnit.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SensingUnit/</path>
    <filename>AbstractSensingUnit_8h</filename>
    <includes id="AbstractBatteryAccess_8h" name="AbstractBatteryAccess.h" local="yes" imported="no">AbstractBatteryAccess.h</includes>
    <includes id="CustomWorldUtility_8h" name="CustomWorldUtility.h" local="yes" imported="no">CustomWorldUtility.h</includes>
    <includes id="SimpleSensorData_8h" name="SimpleSensorData.h" local="yes" imported="no">SimpleSensorData.h</includes>
    <class kind="class">AbstractSensingUnit</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractSensingUnit_8h.html</anchorfile>
      <anchor>ac9ce0d7c4b7d30901f3006f0a39511d4</anchor>
      <arglist>(AbstractSensingUnit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractSensorNode.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/</path>
    <filename>AbstractSensorNode_8cc</filename>
    <includes id="AbstractSensorNode_8h" name="AbstractSensorNode.h" local="no" imported="no">AbstractSensorNode.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSensorNode.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/</path>
    <filename>AbstractSensorNode_8h</filename>
    <includes id="AbstractProcessor_8h" name="AbstractProcessor.h" local="yes" imported="no">AbstractProcessor.h</includes>
    <class kind="class">AbstractSensorNode</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractSensorNode_8h.html</anchorfile>
      <anchor>aace52d4e73302ea486d821f3dc55805f</anchor>
      <arglist>(AbstractSensorNode)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractSignalConditioner.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SignalConditioner/</path>
    <filename>AbstractSignalConditioner_8cc</filename>
    <includes id="AbstractSignalConditioner_8h" name="AbstractSignalConditioner.h" local="no" imported="no">AbstractSignalConditioner.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSignalConditioner.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SignalConditioner/</path>
    <filename>AbstractSignalConditioner_8h</filename>
    <includes id="AbstractBatteryAccess_8h" name="AbstractBatteryAccess.h" local="yes" imported="no">AbstractBatteryAccess.h</includes>
    <class kind="class">AbstractSignalConditioner</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractSignalConditioner_8h.html</anchorfile>
      <anchor>a7fd8f0f565bf51ae2df0f843ef91f6b8</anchor>
      <arglist>(AbstractSignalConditioner)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractSignalConverter.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SignalConverter/</path>
    <filename>AbstractSignalConverter_8cc</filename>
    <includes id="AbstractSignalConverter_8h" name="AbstractSignalConverter.h" local="no" imported="no">AbstractSignalConverter.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractSignalConverter.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/SignalConverter/</path>
    <filename>AbstractSignalConverter_8h</filename>
    <includes id="AbstractBatteryAccess_8h" name="AbstractBatteryAccess.h" local="yes" imported="no">AbstractBatteryAccess.h</includes>
    <class kind="class">AbstractSignalConverter</class>
  </compound>
  <compound kind="file">
    <name>AbstractTransducer.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/Transducer/</path>
    <filename>AbstractTransducer_8cc</filename>
    <includes id="AbstractTransducer_8h" name="AbstractTransducer.h" local="no" imported="no">AbstractTransducer.h</includes>
  </compound>
  <compound kind="file">
    <name>AbstractTransducer.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SensorNode/Sensor/Transducer/</path>
    <filename>AbstractTransducer_8h</filename>
    <includes id="AbstractBatteryAccess_8h" name="AbstractBatteryAccess.h" local="yes" imported="no">AbstractBatteryAccess.h</includes>
    <class kind="class">AbstractTransducer</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>AbstractTransducer_8h.html</anchorfile>
      <anchor>a2dd66141dad8a627e3e94ccde9f8b056</anchor>
      <arglist>(AbstractTransducer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CustomWorldUtility.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/WorldModel/</path>
    <filename>CustomWorldUtility_8cc</filename>
    <includes id="CustomWorldUtility_8h" name="CustomWorldUtility.h" local="no" imported="no">CustomWorldUtility.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>xmlHumidity</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>a13f627f38b9d70e55d986eaaabf7e2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlPressure</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>a9dafe0a706238c6d9f4aac8ffe247dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlTemperature</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>ae8306faf2c75c0444af368646794aacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlLight</name>
      <anchorfile>CustomWorldUtility_8cc.html</anchorfile>
      <anchor>a19676c482ab5a16017cafb0b585ba45f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CustomWorldUtility.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/WorldModel/</path>
    <filename>CustomWorldUtility_8h</filename>
    <includes id="StatisticsInterface_8h" name="StatisticsInterface.h" local="no" imported="no">StatisticsInterface.h</includes>
    <includes id="ExtendedMessage__m_8h" name="ExtendedMessage_m.h" local="no" imported="no">ExtendedMessage_m.h</includes>
    <class kind="class">CustomWorldUtility</class>
    <member kind="function">
      <type></type>
      <name>Define_Module</name>
      <anchorfile>CustomWorldUtility_8h.html</anchorfile>
      <anchor>a2d092fd3cbbee6747837de856fd06730</anchor>
      <arglist>(CustomWorldUtility)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtendedMessage_m.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/ExtendedMessage/</path>
    <filename>ExtendedMessage__m_8h</filename>
    <class kind="class">ExtendedMessage</class>
    <member kind="define">
      <type>#define</type>
      <name>MSGC_VERSION</name>
      <anchorfile>ExtendedMessage__m_8h.html</anchorfile>
      <anchor>a77f5ea746b531cbdbc322a93741e33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doPacking</name>
      <anchorfile>ExtendedMessage__m_8h.html</anchorfile>
      <anchor>a5f1dbc3f7818e07ebbdcd23bc006ad7f</anchor>
      <arglist>(cCommBuffer *b, ExtendedMessage &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doUnpacking</name>
      <anchorfile>ExtendedMessage__m_8h.html</anchorfile>
      <anchor>a7edd4e36f3588e0490c0b25fc5caed0d</anchor>
      <arglist>(cCommBuffer *b, ExtendedMessage &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleSensorData.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SimpleSensorData/</path>
    <filename>SimpleSensorData_8cc</filename>
    <includes id="SimpleSensorData_8h" name="SimpleSensorData.h" local="no" imported="no">SimpleSensorData/SimpleSensorData.h</includes>
  </compound>
  <compound kind="file">
    <name>SimpleSensorData.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/SimpleSensorData/</path>
    <filename>SimpleSensorData_8h</filename>
    <class kind="class">SimpleSensorData</class>
  </compound>
  <compound kind="file">
    <name>StatisticsInterface.cc</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/StatisticsInterface/</path>
    <filename>StatisticsInterface_8cc</filename>
    <includes id="StatisticsInterface_8h" name="StatisticsInterface.h" local="no" imported="no">StatisticsInterface.h</includes>
  </compound>
  <compound kind="file">
    <name>StatisticsInterface.h</name>
    <path>/home/rutho/BA/sensorSim/SensorTechnology/src/StatisticsInterface/</path>
    <filename>StatisticsInterface_8h</filename>
    <includes id="ExtendedMessage__m_8h" name="ExtendedMessage_m.h" local="no" imported="no">ExtendedMessage_m.h</includes>
    <class kind="class">StatisticsInterface</class>
  </compound>
  <compound kind="class">
    <name>AbstractBatteryAccess</name>
    <filename>classAbstractBatteryAccess.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractBatteryAccess</name>
      <anchorfile>classAbstractBatteryAccess.html</anchorfile>
      <anchor>a3dc867e0deb88dfefea0b6c3a64af4c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractBatteryAccess</name>
      <anchorfile>classAbstractBatteryAccess.html</anchorfile>
      <anchor>a71509b619885839c360167485f765b4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractBatteryAccess.html</anchorfile>
      <anchor>a63b66f7b632bfa6be6484176193ee357</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classAbstractBatteryAccess.html</anchorfile>
      <anchor>ac3494456ad3aa8c345d66ec0c5330f68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classAbstractBatteryAccess.html</anchorfile>
      <anchor>a2abcaf9ac5f983d281224595ec25aa80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>classAbstractBatteryAccess.html</anchorfile>
      <anchor>afa26020ebfc390500a3f27f911c04cdf</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>currentOverTime</name>
      <anchorfile>classAbstractBatteryAccess.html</anchorfile>
      <anchor>a6158567a14fd3051d4a8e9a550a42ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>energiePerOperation</name>
      <anchorfile>classAbstractBatteryAccess.html</anchorfile>
      <anchor>a2341d7f11852675a751b13cdbb4ace28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractMemory</name>
    <filename>classAbstractMemory.html</filename>
    <base>AbstractBatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractMemory</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a51760f70111353a8f33de0668d7e13fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractMemory</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a3dc7ffb71058cf3dbd1552adeede6da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a34f6dd0dbc2e52a362f5f19c507612b7</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a60fadeda5aa3c36b75bfbaf0320d2109</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createEntry</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a544807ca04e16314851866317bfe26d8</anchor>
      <arglist>(std::string, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readEntry</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>ac9d24ffcb4a1ce5776abe28b596ce343</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateEntry</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a9c9c9a5f02ce26ca5ef8c8633a113797</anchor>
      <arglist>(std::string, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteEntry</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a04e8a3b68d5c1b2139d7d8c2ccc7cb71</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIdByType</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a7d10cf1d83c6f91311c6006e9ca81e84</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string *</type>
      <name>storageType</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>afc065acb8f00a16c8b37bc92338a0d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>storageValue</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>af37e77e515f88d71abea686fce300a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>storageSize</name>
      <anchorfile>classAbstractMemory.html</anchorfile>
      <anchor>a3ca94ba2d84274eda1580f4fc6037915</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractProcessor</name>
    <filename>classAbstractProcessor.html</filename>
    <base>AbstractBatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractProcessor</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>af91e0e798ab22e889eeedc842fdc4e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractProcessor</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>ad73ecdc550665e07d762d41b5bb17578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a36c23edfa2b06b8f4a3c6256a1c4dffc</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a6664703f2812f13ccbedd5ece8a51e7a</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a4b869a5b219531e4197de889a6f2b1f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedulePeriodicSelfMessage</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>af65b1e4a0c0bccd400a3671d899c3e32</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schedulePeriodicSelfMessage</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a28cb44e4c0bcc589a2b0430cb66753bc</anchor>
      <arglist>(cMessage *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSensingUnit</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>af04358bbc40555ff356d538981e1de08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a24ac35c999591d83e38e9eda22d23279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doCollectStatistics</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a39b7afdc28b4b94e1ccb7b89b298a4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleHostState</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a5214aea4cddf8cfe08719a1e06b02822</anchor>
      <arglist>(const HostState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchProcessorMode</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a6dc64be62603fc957de94dfeae87cd23</anchor>
      <arglist>(MODES mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchProcessorMode</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a7c509729853e92c7aaf15b6535cc57e9</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>switchProcessorMode</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a0f87c975fb08e2ef6850d4e642a362ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MODES</type>
      <name>getProcessorMode</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a53e0114e53cdb0b58e424417af514b98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasTemperatureSensor</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>ad7fe348ec154f85d199ea9365d25a4b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasHumiditySensor</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>ae4d1bdae4fc06bb6bd4892e7e7dcd8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasPressureSensor</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>aba49db119dd32e7604fac0037e4a58c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasLightSensor</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a5c0e83c3a078def36b6c687f18ff665f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>MODES</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a57b598cf993cb8031010d1a492ed28a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>NORMAL</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a57b598cf993cb8031010d1a492ed28a1a29b5f78b5bc81440f65a1d8d476e6339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>POWER_SAVING</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a57b598cf993cb8031010d1a492ed28a1a9da8964db21f5e3bfef3caaa7bd713a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>HIGH_PERFORMANCE</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a57b598cf993cb8031010d1a492ed28a1adf2b35eedc48a1df03bd76e407291794</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>OFF</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a57b598cf993cb8031010d1a492ed28a1a9878ced48f8b2f002dd36d9b8718daba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sensingIntervall</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a37c7a74bb8ccc60468baff982a07cd3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>shiftProcessorModeIntervall</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>ab5e5105cb3e02bab0349b491cf57743a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>collectStatisticsIntervall</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a2602916413177217de719fa6d57fce28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessageMeasure</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>ad3901e6d0889871b56c69932ccc5076c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessageShiftMode</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a1ed456cd8ec7fdeea4f16c779476af1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cMessage *</type>
      <name>selfMessageStatistics</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a79f1d948b5709145f57843d2745cc274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentOverTimeNormal</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a5edd19c99e936873d900e0b27951f038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>energiePerOperationNormal</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a8d4b8c4dd88ecf713a8bddb71b34258e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentOverTimePowerSaving</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a647c7e1664c15787bed7374897de013f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>energiePerOperationPowerSaving</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a93c218e36b50ad4249ecb0f5d6e2c437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currentOverTimeHighPerformance</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a69de6775ebdf4e761fcf7ee1bcdbcc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>energiePerOperationHighPerformance</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a0d7f640ffa8a4a7c19085e018f4dcc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>activatedMode</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a4f12acc200a7a52d8490a45d79af4b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>voltage</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a5d59fca74032cdd3f7b38800f9e9dc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>residualRelative</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a7db710f925e93b6e522be15da50687e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>residualAbs</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>accad5e71945c43f7ab4c83d6eb851d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cLongHistogram</type>
      <name>voltageStats</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>ac9c1276348e4fe80e1c7e620d7271f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>voltageVector</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>ada5fce6f8fc00b16ecca1a6b039ea656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cLongHistogram</type>
      <name>residualRelativeStats</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a642eea20e7d94fca369fbb8ea8683df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>residualRelativeVector</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>aa81689146415e6f8e7e101b6227194d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cLongHistogram</type>
      <name>residualAbsStats</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a28b12abe5834b02f18194da36140c277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>residualAbsVector</name>
      <anchorfile>classAbstractProcessor.html</anchorfile>
      <anchor>a4721e17d6950189d542c34c0e0e9b354</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractSensingUnit</name>
    <filename>classAbstractSensingUnit.html</filename>
    <base>AbstractBatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractSensingUnit</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a9fbd2ca0416165328ad81928c2fe46ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSensingUnit</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a0df5b81c64722f5840cb2557b3820646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a81c3160c504fe03acb957d36dab11441</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAndForward</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a4598892103ce0b0cb445d64f791a5e23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a78c7bc3d2e75649564f9116d6f589331</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Coord *</type>
      <name>getLocation</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a1608983181cb95ec4f8519f6fe2c8762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>readData</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a558143ac00a8a3bba0288b2cf4e4869b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ExtendedMessage *</type>
      <name>generateMessage</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a4714cfa2132e7878b407d23283b3c24e</anchor>
      <arglist>(const char *msgname)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord *</type>
      <name>Position</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a6f0a57a20788d0759cf17f9e8a0aa88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CustomWorldUtility *</type>
      <name>world</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>ab4f3381044031b23becdd05ebb1c0869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelMobilityPtrType</type>
      <name>pMobType</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a8c4554acc912bcf3d50d867715ebed13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>classAbstractSensingUnit.html</anchorfile>
      <anchor>a86a9983eab854bfee2d60acdce9be46e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractSensorNode</name>
    <filename>classAbstractSensorNode.html</filename>
    <base>cModule</base>
    <member kind="function">
      <type></type>
      <name>AbstractSensorNode</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>aa887f2cf2be48160d7b0265b7b96cf76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSensorNode</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>ad78a7c5a82101ba21abba970066cab84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDatarateChannel *</type>
      <name>getControlChannel</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>a86868d1adf9d9c1e3caea8ce5d199b15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDatarateChannel *</type>
      <name>getDataChannel</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>a814dae80e9690ed87d550aeff2afb2b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>a832ad55b3ef5bca6c69cb7068199166b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>ac58bf654220942d0892cd66b0205184a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>af4615ce4d488b860317998484d6c1e72</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNumGates</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>ad4f13e0b312d0b874de793b35051bbfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createProcessor</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>a82728356ada1f20e01616bd1fc5d70ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectProcessorAndMemory</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>a7b7b14e869bdffcf3568634b0d999a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectProcessorAndSensor</name>
      <anchorfile>classAbstractSensorNode.html</anchorfile>
      <anchor>ad445e39986d51e1124744eab87ce3b36</anchor>
      <arglist>(cModule &amp;, std::string)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractSignalConditioner</name>
    <filename>classAbstractSignalConditioner.html</filename>
    <base>AbstractBatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractSignalConditioner</name>
      <anchorfile>classAbstractSignalConditioner.html</anchorfile>
      <anchor>afaae205f6bb08295724898f7c72a366f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSignalConditioner</name>
      <anchorfile>classAbstractSignalConditioner.html</anchorfile>
      <anchor>aab81002aafa4317ff87d98f8bed87a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractSignalConditioner.html</anchorfile>
      <anchor>a8c2df73639b7c829045b5e829585c7bf</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractSignalConverter</name>
    <filename>classAbstractSignalConverter.html</filename>
    <base>AbstractBatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractSignalConverter</name>
      <anchorfile>classAbstractSignalConverter.html</anchorfile>
      <anchor>a57fa4ab6d4852e79c8a9b774fb7b9326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractSignalConverter</name>
      <anchorfile>classAbstractSignalConverter.html</anchorfile>
      <anchor>adaefdb4ecd7ab4b6597b5a2630c0d435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractSignalConverter.html</anchorfile>
      <anchor>afd90ef37a4c0c8612c15289bbc392db2</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractTransducer</name>
    <filename>classAbstractTransducer.html</filename>
    <base>AbstractBatteryAccess</base>
    <member kind="function">
      <type></type>
      <name>AbstractTransducer</name>
      <anchorfile>classAbstractTransducer.html</anchorfile>
      <anchor>a550d7a9ea2ff02fd671a577127a66fcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractTransducer</name>
      <anchorfile>classAbstractTransducer.html</anchorfile>
      <anchor>ac543d76e6cdd277ef1731175dc3a27ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMessage</name>
      <anchorfile>classAbstractTransducer.html</anchorfile>
      <anchor>a17bac38b973f48d168e56b12b7268f91</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CustomWorldUtility</name>
    <filename>classCustomWorldUtility.html</filename>
    <base>StatisticsInterface</base>
    <member kind="function">
      <type></type>
      <name>CustomWorldUtility</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a8ae1cd5aea3572589a1f02e2321ccb70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CustomWorldUtility</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a73b162553cbc92e2c76c5a7f0366e522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getValueByPosition</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a126a0fbfce6a3c25550c6179f2aae2f2</anchor>
      <arglist>(std::string, Coord *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int ***</type>
      <name>readXML</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a1c72ebd667de5072ff048a8c1a2aec76</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>afe9bd131432912a3d68fae059e119b48</anchor>
      <arglist>(int ***&amp;parameter, int ***&amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>acc66fcf67be28acc729c0959b8a1dcf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPressure</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a99b8e3a05742bf8075be601297b153aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setHumidity</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>afa8e8a57f4670d18a5f4cfb2d9cddd67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setLight</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>aa1f812e94036c2b388337ced4a2ea6a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a3c3e94f910e3591afe8614703dfd0b54</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ExtendedMessage *</type>
      <name>generateMessage</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ae8e5ca8ba35d32db08967c36b673d5ff</anchor>
      <arglist>(const char *msgname)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateEnvironmentData</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a868e823f29c00d25a3f245f035372521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>generateTemperature</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a4f4564b45f65f2f5ea52fa30447b118f</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>generatePressure</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ab36b97b0202e13c2ce7fa5d6f2db297a</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>generateHumidity</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a10d06e6d8acbc176591e2dbd3abda155</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int *</type>
      <name>generateLight</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a1173bef536d5a4c365a851c95a3aa750</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDisplay</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a709aaca388e19d04a3fb4f165d0ceceb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a2c0bbdcf5488fc82de7a10b29194d91d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>destroySensorData</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ae0066c89163fe4b34193db17dd2716bc</anchor>
      <arglist>(int ***&amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getEnumFromType</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ae9e9c291ea460dc7b7a955cc9f3f0289</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a32f28e6a1a08c7c677d1163979956117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int ***</type>
      <name>temperatureArray</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>ac073fe1cd47798dbbb5645f09a007b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int ***</type>
      <name>pressureArray</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a8828095d15d39a4a0d33c812c48d5ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int ***</type>
      <name>humidityArray</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>aa6b990b6b6ce3e3e0b9f3d5413b61082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int ***</type>
      <name>lightArray</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a2b43dce45399d3d4bbda2c6128515b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sizeX</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a05f35ec3e94509d81b44e891be8d52e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sizeY</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a9941ba5f5607868671de963e427c019e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sizeZ</name>
      <anchorfile>classCustomWorldUtility.html</anchorfile>
      <anchor>a18e5b285951e6160dfe6132d3bd753c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExtendedMessage</name>
    <filename>classExtendedMessage.html</filename>
    <base>cMessage</base>
    <member kind="function">
      <type></type>
      <name>ExtendedMessage</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ade0274ccdff9560ffe8fad9df854f319</anchor>
      <arglist>(const char *name=NULL, int kind=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExtendedMessage</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a98cc3e001bc44e7f13db49556bbfde09</anchor>
      <arglist>(const ExtendedMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExtendedMessage</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a910195e5d212e7efbc1289613f61c6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ad9aa685b7360efaa3777167677343f51</anchor>
      <arglist>(const ExtendedMessage &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtendedMessage *</type>
      <name>dup</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>af3e6533074e0f1804f7d4c1ca2bdccd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>abad8c6d568cff093239ebcb024034f1e</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>aa9d0e2513c59d1dc2e31373b155a2e51</anchor>
      <arglist>(cCommBuffer *b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSource</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>af7eaaeebebdcd783212aa9ff2170f145</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>adccfc56b16455ecc18975b22bc8f9e2b</anchor>
      <arglist>(int source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestination</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a996afd43620680ce68c75604babd091b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDestination</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a813ecbc567b0127c4d57b451b3afb364</anchor>
      <arglist>(int destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getHopCount</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a9b4ec09ba1a5913dd6c3952c09748779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHopCount</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a71e081f7cdc58d2f55a589757639365c</anchor>
      <arglist>(int hopCount)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ad6bf387750a00b6352c7054e58a110d7</anchor>
      <arglist>(const ExtendedMessage &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>source_var</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ad94fa5e715f14f856756f4b76fa7adbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>destination_var</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a5500e69efec5761be0282886f730541e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>hopCount_var</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>a976f580abc29bb900761b567615a7b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classExtendedMessage.html</anchorfile>
      <anchor>ab07ff9eccc340341355a0a341bb971fb</anchor>
      <arglist>(const ExtendedMessage &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleSensorData</name>
    <filename>classSimpleSensorData.html</filename>
    <base>cNamedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleSensorData *</type>
      <name>dup</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>a3596358623935b76f49335ccc4a3c91d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>a11e346aae50f95840a5a92824e3fecc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleSensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>a3700727cd38b4754462cbab02d2b202d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>a73fc4b9e4e33e9218a6fef5039c8f937</anchor>
      <arglist>(const char *name, int sensorData, bool namepooling=true)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sensorData</name>
      <anchorfile>classSimpleSensorData.html</anchorfile>
      <anchor>ad510fe1fbc58b19c5c6c0fea4592d966</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StatisticsInterface</name>
    <filename>classStatisticsInterface.html</filename>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ExtendedMessage *</type>
      <name>generateMessage</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a519db68a06bb988bceea9183224033fe</anchor>
      <arglist>(const char *msgname)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>updateDisplay</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a72197f87748af10d75ac70caddb2712e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a50a7b06a009cc7693e5677f67e1ab23c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numSent</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a42d887601ec32670fd2892b4ef48e91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>numReceived</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>ab8903c2fc5b9b6e93172a89f37b3f620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cLongHistogram</type>
      <name>hopCountStats</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a14368dced736b91c2b3208308175c946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cOutVector</type>
      <name>hopCountVector</name>
      <anchorfile>classStatisticsInterface.html</anchorfile>
      <anchor>a8cfabbb0aa6c933032214ac7b117d225</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>NEDSupport</name>
    <filename>classNEDSupport_1_1ParameterRef.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosFSM</name>
    <title>Final State Machine macros</title>
    <filename>group__MacrosFSM.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosWatch</name>
    <title>WATCH macros</title>
    <filename>group__MacrosWatch.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersCont</name>
    <title>Continuous distributions</title>
    <filename>group__RandomNumbersCont.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersDiscr</name>
    <title>Discrete distributions</title>
    <filename>group__RandomNumbersDiscr.html</filename>
  </compound>
  <compound kind="group">
    <name>SimCore</name>
    <title>Simulation core classes</title>
    <filename>group__SimCore.html</filename>
  </compound>
  <compound kind="group">
    <name>Containers</name>
    <title>Container classes</title>
    <filename>group__Containers.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbers</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbers.html</filename>
  </compound>
  <compound kind="group">
    <name>Statistics</name>
    <title>Statistical data collection</title>
    <filename>group__Statistics.html</filename>
  </compound>
  <compound kind="group">
    <name>SimSupport</name>
    <title>Utility classes</title>
    <filename>group__SimSupport.html</filename>
  </compound>
  <compound kind="group">
    <name>Envir</name>
    <title>User interface: cEnvir and ev</title>
    <filename>group__Envir.html</filename>
  </compound>
  <compound kind="group">
    <name>EnumsTypes</name>
    <title>Enums, types, function typedefs</title>
    <filename>group__EnumsTypes.html</filename>
  </compound>
  <compound kind="group">
    <name>Functions</name>
    <title>Functions</title>
    <filename>group__Functions.html</filename>
  </compound>
  <compound kind="group">
    <name>Macros</name>
    <title>Macros</title>
    <filename>group__Macros.html</filename>
  </compound>
  <compound kind="group">
    <name>EnvirExtensions</name>
    <title>Extension interfaces</title>
    <filename>group__EnvirExtensions.html</filename>
  </compound>
  <compound kind="group">
    <name>Internals</name>
    <title>Internal classes</title>
    <filename>group__Internals.html</filename>
  </compound>
  <compound kind="group">
    <name>ParsimBrief</name>
    <title>Parallel simulation extension</title>
    <filename>group__ParsimBrief.html</filename>
  </compound>
  <compound kind="group">
    <name>RandomNumbersGen</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbersGen.html</filename>
  </compound>
  <compound kind="group">
    <name>MacrosReg</name>
    <title>Registration macros</title>
    <filename>group__MacrosReg.html</filename>
  </compound>
  <compound kind="group">
    <name>FunctionsString</name>
    <title>String-related</title>
    <filename>group__FunctionsString.html</filename>
  </compound>
  <compound kind="page">
    <name>main</name>
    <title>OMNeT++ API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="page">
    <name>APIChanges</name>
    <title>API Changes</title>
    <filename>APIChanges</filename>
  </compound>
</tagfile>
